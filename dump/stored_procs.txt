delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_CookieLogin_user`(
	IN i_memberid varchar(255),
	IN i_ip varchar(255),
	IN i_useragent varchar(255),
	IN i_token varchar(255),
	IN i_usersession varchar(255)
)
BEGIN
	DECLARE	o_token varchar(255);
	DECLARE o_usersession varchar(255);
	DECLARE o_memberid varchar(255);

	START TRANSACTION;

	SELECT sha1(i_memberid + NOW()) into o_usersession;

	# UPDATE es_member table and create usersession
	UPDATE `es_member` set `usersession`= o_usersession WHERE `id_member` = i_memberid;

	COMMIT;

	# UPDATE keeplogin table and generate new cookie token
	SELECT sha1(concat(i_memberid,i_usersession, NOW())) into o_token;

	UPDATE `es_keeplogin` SET `token` = o_token WHERE `id_member` = i_memberid AND `last_ip` = i_ip AND `useragent` = i_useragent AND `token` = i_token;

	COMMIT;

	SELECT o_usersession, o_token, i_memberid as o_memberid;

END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_CreateCookie_Keeplogin`(
	IN i_memberid VARCHAR(255),
	IN i_ip  VARCHAR(255),
	IN i_useragent varchar(255),
	IN i_usersession varchar(255)
       )
BEGIN
	DECLARE o_memberid BOOLEAN;
	DECLARE o_ip varchar(255);
	DECLARE o_useragent varchar(255);
	DECLARE o_token varchar(255);
	DECLARE v_token varchar(255);

	START TRANSACTION;

	SELECT sha1(concat(i_memberid,i_usersession, NOW())) into v_token;

	INSERT INTO `es_keeplogin` (`id_member`, `last_ip`, `useragent`, `token`)
	VALUES (i_memberid, i_ip, i_useragent, v_token)
	ON DUPLICATE KEY UPDATE `token` = v_token;

	COMMIT;

	SELECT `id_member` as o_memberid, `last_ip` as o_ip, `useragent` as o_useragent, `token` as o_token FROM `es_keeplogin` WHERE `id_member` = i_memberid AND `token` = v_token; 
	#SELECT `token` as o_token FROM `es_keeplogin` WHERE `id_member` = i_memberid AND `token` = v_token; 
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_FullDelete_product`(
	IN i_productid INT(10),
    IN i_memberid INT(10)
	)
BEGIN
	DECLARE o_success BOOLEAN;
    DECLARE o_productid INT(10);
	DECLARE o_imgpath VARCHAR(255);
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	  BEGIN
	      ROLLBACK;
	      SELECT o_success AS o_success, o_productid as o_productid, o_imgpath as o_imgpath;
	  END;
	  
	DECLARE EXIT HANDLER FOR NOT FOUND
	  BEGIN
	      ROLLBACK;
	      SELECT o_success AS o_success, o_productid as o_productid, o_imgpath as o_imgpath;
	  END;
	  
	START TRANSACTION;

	SET o_success = FALSE;	

	SELECT `id_product` INTO o_productid FROM `es_product` WHERE `id_product` = i_productid AND `member_id` = i_memberid;
	IF o_productid IS NOT NULL THEN
		SELECT `product_image_path` INTO o_imgpath FROM `es_product_image` WHERE `product_id` = i_productid AND `is_primary`=1;
	    DELETE FROM `es_product_attr` WHERE `product_id` = i_productid;
		DELETE FROM `es_product_image` WHERE `product_id` = i_productid;
		DELETE FROM `es_product_review` WHERE `product_id` = i_productid;
	    DELETE FROM `es_product` WHERE `id_product` = i_productid AND `member_id` = i_memberid;
		SET o_success = TRUE;
	ELSE
		SET o_success = FALSE;
	END IF;
	
    COMMIT;
        
    SELECT o_success AS o_success, o_productid AS o_productid, o_imgpath as o_imgpath;
	
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_getProduct`(
	IN i_productid INT(10)
)
BEGIN
	DECLARE o_success BOOLEAN;
	DECLARE	o_message VARCHAR(50);
	
	DECLARE o_productid INT(10);

	
	START TRANSACTION;

	SET o_success = FALSE;
	SET o_message = 'An error occured.';

	SELECT id_product INTO o_productid
		FROM es_product
		WHERE id_product = i_productid;

	IF o_productid IS NOT NULL THEN
		UPDATE `es_product` SET `clickcount`=`clickcount`+1 WHERE `id_product` = o_productid;
		SET o_success = TRUE;
		SET o_message = '';
	
	ELSE
		SET o_success = FALSE;

	END IF;

	COMMIT;

	IF o_success = TRUE THEN
		SELECT p.id_product as id_product, p.name as product_name, p.description as description, 
			  p.cat_id as cat_id, p.price as price, p.quantity as quantity, p.brief as brief, p.sku as sku,
			  s.name as style_name, b.name as brand_name, p.member_id as sellerid, m.nickname as sellernickname, m.username as sellerusername, o_success, o_message
			  FROM es_product p 
			  LEFT JOIN es_style s ON p.style_id = s.id_style
			  LEFT JOIN es_brand b ON p.brand_id = b.id_brand
			  LEFT JOIN es_member m on p.member_id = m.id_member 
			  WHERE p.id_product = o_productid AND p.is_delete = 0;		
	ELSE
		SELECT o_message, o_success;
	END IF;

	





END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_Login_user`(
	IN i_username VARCHAR(255),
	IN i_password  VARCHAR(255),
	in i_ip varchar(255)
       )
BEGIN
	DECLARE o_success BOOLEAN;
	DECLARE o_memberid VARCHAR(50); 
	DECLARE o_session VARCHAR(150); 
	DECLARE o_message VARCHAR(50); 
	declare v_encpass varchar(250);
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_memberid AS o_memberid, o_session AS o_session, o_message AS o_message;
	  END;
	  
	DECLARE EXIT HANDLER FOR NOT FOUND
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_memberid AS o_memberid, o_session AS o_session, o_message AS o_message;
	  END;
	  
	START TRANSACTION;
        
        SET o_success = FALSE;	
	SET o_message = 'Invalid Email / Password';
        ## Select if exist
		select reverse(PASSword(concat(md5(i_username),sha1(i_password)))) into v_encpass;
                SELECT id_member INTO o_memberid FROM `es_member` WHERE username = i_username AND PASSWORD = v_encpass; 
	IF o_memberid IS NOT NULL THEN 
                SELECT SHA1(o_memberid + NOW()) INTO o_session;
                UPDATE `es_member` SET usersession = o_session, `login_count` = `login_count` + 1 , `last_login_ip` = i_ip ,`last_login_datetime` = NOW()  WHERE id_member = o_memberid;
             	SET o_success = TRUE;
             	set o_message = "";
	ELSE
		SET o_success = FALSE;
	END IF;   
	       
        COMMIT;
        
        
        SELECT o_success AS o_success, o_memberid AS o_memberid, o_session AS o_session, o_message AS o_message;
	
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_Payment_order`(
	IN i_invoice_no int(10),
	in i_str_product text,
	in i_cnt_product int(10),
	in i_str_option text,
	IN i_cnt_option INT(10)
	
)
BEGIN
	# ACCESSIBLE VARIABLES
	DECLARE o_success BOOLEAN;
	DECLARE	o_message VARCHAR(50);
	declare v_order_id int(10);
	
	# VARIABLE FOR PRODUCTS
	declare v_counter_product int(10) default 1;
	declare v_data_product text;
	declare v_product_id int(10);
	DECLARE v_order_qty int(10);
	DECLARE v_price double(10,2);
	DECLARE v_tax DOUBLE(10,2);
	DECLARE v_total DOUBLE(10,2);
	
	# VARIABLE FOR PRODUCT OPTIONS
	declare v_counter_option int(10) default 1;
	DECLARE v_data_option TEXT;
	declare v_order_product_id int(10);
	declare v_attr_id int(10);
	declare v_product_attr_id int(10);
	declare v_order_product_id_temp int(10);
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_message AS o_message;
	  END;
	  
	DECLARE EXIT HANDLER FOR NOT FOUND
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_message AS o_message;
	  END;
	  
	START TRANSACTION;
	
		
	SET o_success = FALSE;
	SET o_message = null;
		
	IF o_message IS NULL THEN
		set o_success = true;
		INSERT INTO `es_order` (`invoice_no`) VALUES (i_invoice_no);
		select max(id_order) into v_order_id from es_order;
		
		#--- insert to es_order_product
			WHILE v_counter_product <= i_cnt_product DO
				SELECT SPLIT_STRING(i_str_product, '<||>',v_counter_product) INTO v_data_product;
					
					SELECT SPLIT_STRING(v_data_product, '{+}',2) INTO v_product_id;
					SELECT SPLIT_STRING(v_data_product, '{+}',3) INTO v_order_qty;
					SELECT SPLIT_STRING(v_data_product, '{+}',4) INTO v_price;
					SELECT SPLIT_STRING(v_data_product, '{+}',5) INTO v_tax;
					SELECT SPLIT_STRING(v_data_product, '{+}',6) INTO v_total;
					INSERT INTO `es_order_product` (`order_id`,`product_id`,`order_quantity`,`price`,`tax`,`total`) 
					VALUES  (v_order_id,v_product_id,v_order_qty,v_price,v_tax,v_total) ;
					SET v_counter_product=v_counter_product+1;
					
			END WHILE;
				
		#--- insert to es_order_option
			WHILE v_counter_option <= i_cnt_option DO
				SELECT SPLIT_STRING(i_str_option, '<||>',v_counter_option) INTO v_data_option;
						
					SELECT SPLIT_STRING(v_data_option, '{+}',3) INTO v_order_product_id_temp;
					select id_order_product into v_order_product_id  from `es_order_product` where order_id = v_order_id and  product_id = v_order_product_id_temp;
					SELECT SPLIT_STRING(v_data_option, '{+}',1) INTO v_attr_id;
					SELECT SPLIT_STRING(v_data_option, '{+}',2) INTO v_product_attr_id;
					insert into `es_order_option` (`order_product_id`,`attr_id`,`product_attr_id`) values (v_order_product_id,v_attr_id,v_product_attr_id);
					SET v_counter_option=v_counter_option+1;
					
			END WHILE;	
	ELSE
		SET o_success = FALSE;
	END IF;
				
	COMMIT;
		SELECT o_message, o_success;
 	
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_Signup_user`(
	IN i_username VARCHAR(255),
	IN i_password VARCHAR(255),
	IN i_contactno VARCHAR(45),
	IN i_email VARCHAR(255),
	IN i_region VARCHAR(45)
)
BEGIN
	DECLARE v_pass VARCHAR(255);
	

	START TRANSACTION;
	
	SELECT reverse(PASSWORD(concat(md5(i_username),sha1(i_password)))) into v_pass;

	INSERT INTO `es_member` (`username`, `password`, `contactno`, `email`, `region`, `datecreated`)
	VALUES (i_username, v_pass, i_contactno, i_email, i_region, NOW())
	ON DUPLICATE KEY UPDATE username=i_username, `password`=v_pass, contactno=i_contactno, email=i_email, region=i_region;

	COMMIT;

END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `es_sp_Logout_user`(
	IN i_usersession VARCHAR(255),
	IN i_id  VARCHAR(255)
       )
BEGIN
	DECLARE o_success BOOLEAN;
	DECLARE o_memberid VARCHAR(50); 
	DECLARE o_message VARCHAR(50); 
	
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_memberid AS o_memberid, o_message AS o_message;
	  END;
	  
	DECLARE EXIT HANDLER FOR NOT FOUND
	  BEGIN
	      ROLLBACK;
	   SELECT o_success AS o_success, o_memberid AS o_memberid, o_message AS o_message;
	  END;
	  
	START TRANSACTION;
        
        SET o_success = FALSE;	
	SET o_message = 'An error occur.';
        ## Select if exist
                SELECT id_member INTO o_memberid FROM `es_member` WHERE usersession = i_usersession AND id_member = i_id; 
	IF o_memberid IS NOT NULL THEN 
                UPDATE `es_member` SET usersession = '' WHERE id_member = o_memberid;
             	SET o_success = TRUE;
             	SET o_message = "";
	ELSE
		SET o_success = FALSE;
	END IF;   
	       
        COMMIT;
        
        
        SELECT o_success AS o_success, o_memberid AS o_memberid, o_message AS o_message;
	
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` FUNCTION `GetFamilyTree`(GivenID INT) RETURNS text CHARSET latin1
    DETERMINISTIC
BEGIN
    DECLARE rv,q,queue,queue_children VARCHAR(1024);
    DECLARE queue_length,front_id,pos INT;
    SET rv = '';
    SET queue = GivenID;
    SET queue_length = 1;
    WHILE queue_length > 0 DO
        SET front_id = FORMAT(queue,0);
        IF queue_length = 1 THEN
            SET queue = '';
        ELSE
            SET pos = LOCATE(',',queue) + 1;
            SET q = SUBSTR(queue,pos);
            SET queue = q;
        END IF;
        SET queue_length = queue_length - 1;
        SELECT IFNULL(qc,'') INTO queue_children
        FROM (SELECT GROUP_CONCAT(id_cat) qc
        FROM es_cat WHERE parent_id = front_id) A;
        IF LENGTH(queue_children) = 0 THEN
            IF LENGTH(queue) = 0 THEN
                SET queue_length = 0;
            END IF;
        ELSE
            IF LENGTH(rv) = 0 THEN
                SET rv = queue_children;
            ELSE
                SET rv = CONCAT(rv,',',queue_children);
            END IF;
            IF LENGTH(queue) = 0 THEN
                SET queue = queue_children;
            ELSE
                SET queue = CONCAT(queue,',',queue_children);
            END IF;
            SET queue_length = LENGTH(queue) - LENGTH(REPLACE(queue,',','')) + 1;
        END IF;
    END WHILE;
    RETURN rv;
END$$


delimiter $$

CREATE DEFINER=`root`@`localhost` FUNCTION `SPLIT_STRING`(str VARCHAR(255), delim VARCHAR(12), pos INT) RETURNS varchar(255) CHARSET utf8
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(str, delim, pos),
       LENGTH(SUBSTRING_INDEX(str, delim, pos-1)) + 1),
       delim, '')$$


