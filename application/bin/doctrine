#!/usr/bin/env php
<?php

error_reporting(E_ALL);
ini_set('display_errors', 1);

include_once __DIR__ . '/../../vendor/autoload.php';
require_once __DIR__ . '/../src/EasyShop/Core/Configuration/Configuration.php';

use Symfony\Component\Console\Helper\HelperSet;
use Doctrine\ORM\Tools\Console\ConsoleRunner;




// add commands here
$commands = [
    
    /* Migration commands */
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\DiffCommand(),
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\ExecuteCommand(),
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\GenerateCommand(),
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\MigrateCommand(),
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\StatusCommand(),
    new \Doctrine\DBAL\Migrations\Tools\Console\Command\VersionCommand()
];

$configService = new EasyShop\Core\Configuration\Configuration();

$dbConfig = require dirname(__FILE__). '/../config/param/database.php';

if($configService->isConfigFileExists()){
    $server_config = $configService->getConfigValue();
    if(isset($server_config['DB_superuser'])  && strlen(trim($server_config['DB_superuser'])) > 0  && 
       isset($server_config['DB_superpassword']) ){
            $dbConfig['user'] = $server_config['DB_superuser'];
            $dbConfig['password'] = $server_config['DB_superpassword'];
    }
}

$doctrineConfig = Doctrine\ORM\Tools\Setup::createAnnotationMetadataConfiguration([__DIR__ . '/../src/EasyShop/Entities'], false, null, null, false);
$doctrineConfig->setProxyDir(__DIR__ . '/../src/EasyShop/Doctrine/Proxies');
$doctrineConfig->setProxyNamespace('EasyShop\Doctrine\Proxies');

$entityManager = Doctrine\ORM\EntityManager::create(
    $dbConfig,
    $doctrineConfig
);

$entityManager->getConnection()
              ->getDatabasePlatform()
              ->registerDoctrineTypeMapping('enum', 'string');

$helperSet = ConsoleRunner::createHelperSet($entityManager);
$helperSet->set(new Symfony\Component\Console\Helper\DialogHelper());

if ( ! ($helperSet instanceof HelperSet)) {
    foreach ($GLOBALS as $helperSetCandidate) {
        if ($helperSetCandidate instanceof HelperSet) {
            $helperSet = $helperSetCandidate;
            break;
        }
    }
}

\Doctrine\ORM\Tools\Console\ConsoleRunner::run($helperSet, $commands);
