<?xml version='1.0' ?>
<map>
    

    <select id="selectCategoryDetails">
        SELECT
        `id_cat`
        , `name`
        , `description`
        , `keywords`
        , `parent_id`
        , `sort_order`
        , `is_main` 
        FROM `es_cat`
        WHERE id_cat = :id_cat
        LIMIT 1
    </select>
	
    <select id="selectFirstLevel">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        sort_order,
        parent_id,
        is_main

        FROM es_cat
        WHERE parent_id = 1
        AND id_cat != 1
        ORDER BY sort_order ASC
    </select>
    
    <select id="selectFirstLevelIsMain">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        sort_order,
        parent_id,
        is_main

        FROM es_cat
        WHERE parent_id = 1
        AND id_cat != 1
        AND is_main = 1
        ORDER BY sort_order ASC
    </select>

    <select id="selectFirstLevelAlpha">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        sort_order,
        parent_id,
        is_main

        FROM es_cat
        WHERE parent_id = 1
        AND id_cat != 1
        ORDER BY name ASC
    </select>
    
    <select id="selectFirstLevelIsMainAlpha">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        sort_order,
        parent_id,
        is_main

        FROM es_cat
        WHERE parent_id = 1
        AND id_cat != 1
        AND is_main = 1
        ORDER BY name ASC
    </select>

    <select id="selectDownLevel">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        parent_id,
        is_main

        FROM es_cat
        WHERE parent_id = :parent_id
        and id_cat != 1
        ORDER BY sort_order ASC
    </select>

    <select id="selectChild">
     SELECT 
     CASE
     WHEN `GetFamilyTree` (id_cat) = '' 
     THEN '0,0' 
     ELSE `GetFamilyTree` (id_cat) 
     END 
     FROM
     `es_cat` 
     WHERE id_cat != 1 
     AND id_cat = :cat_id ;
    </select>

    <select id="getParent">
        SELECT T2.id_cat, T2.name
        FROM (
        SELECT
        @r AS _id,
        (SELECT @r := parent_id FROM es_cat WHERE id_cat = _id) AS parent_id,
        @l := @l + 1 AS lvl
        FROM
        (SELECT @r := :id, @l := 0) vars,
        es_cat h
        WHERE @r != 1) T1
        JOIN es_cat T2
        ON T1._id = T2.id_cat
        ORDER BY T1.lvl DESC
    </select>

    <select id="getLookupListItem">
        SELECT 
        *
        FROM es_attr_lookuplist_item 
        WHERE attr_lookuplist_id = :id
    </select>
    
    <select id="getProduct2">
        SELECT p.id_product as id_product, p.name as product_name, p.description as description, 
        p.cat_id as cat_id, p.price as price, p.quantity as quantity, p.brief as brief, p.sku as sku,
        s.name as style_name, b.name as brand_name, p.member_id as sellerid
        FROM es_product p 
        LEFT JOIN es_style s ON p.style_id = s.id_style
        LEFT JOIN es_brand b ON p.brand_id = b.id_brand
        WHERE p.id_product = :id AND p.is_delete = 0 
    </select>
	
    <select id="getProduct">
        CALL `es_sp_getProduct` (:id)
    </select>
  
	
    <select id="getProductAttributes">
        SELECT h.field_name as name, h.id_optional_attrhead as 'name_id', d.value_name as attr_value, d.id_optional_attrdetail as 'attr_value_id' , d.value_price as attr_price, COALESCE(i.product_image_path,'') as product_image_path, 'option' as 'type', i.id_product_image as 'img_id', '0' as 'datatype_id'
        FROM es_optional_attrhead h 
        LEFT JOIN es_optional_attrdetail d ON h.id_optional_attrhead = d.head_id
        LEFT JOIN es_product_image i ON d.product_img_id = i.id_product_image
        WHERE h.product_id=:id
        UNION
        SELECT  b.name, b.id_attr,  a.attr_value, a.id_product_attr, a.attr_price, '', 'specific', '0', b.datatype_id
        FROM es_product_attr a 
        LEFT JOIN  es_attr b on a.attr_id = b.id_attr
        WHERE a.product_id =:id
    </select>
    
    <select id="getProductImages">
        SELECT product_image_path, id_product_image, is_primary FROM es_product_image WHERE product_id = :id
        ORDER BY is_primary DESC
    </select>
  
    <select id="getProductsByCategory">
        SELECT p.id_product, p.name, p.price, COALESCE(i.product_image_path,'') as product_image_path, 
        s.name as style, p.description FROM es_product p 
        LEFT JOIN es_product_image i ON (p.id_product=i.product_id AND i.is_primary = 1)
        LEFT JOIN es_style s ON p.style_id = s.id_style
        WHERE p.cat_id = :cat_id
    </select>
  
    <select id="getBrandsByCategory">
        SELECT p.name as productname, b.name as brandname from es_product p
        LEFT JOIN es_brand b ON b.id_brand = p.brand_id
        WHERE p.cat_id = :cat_id  GROUP BY id_brand ORDER BY b.sort_order ASC
    </select>
  
    <select id="submitReview">
        INSERT INTO es_product_review 
        (`member_id`, `product_id`, `datesubmitted`, `rating`, `title`, `review`, `is_show`) VALUES 
        (:member_id, :product_id ,NOW(), :rating, :title, :review, '1')
    </select>

    <select id="addReply">
        INSERT INTO es_product_review (`product_id`, `review`, `is_show`, `p_reviewid`, `member_id`, `datesubmitted`)
        VALUES (:product_id, :review, '1', :p_reviewid, :member_id, NOW())
    </select>
	
    <select id="getRecentProductReviews">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`, DATE_FORMAT(a.`datesubmitted`, "%e-%b-%y %k:%i") as datesubmitted, b.`username` as reviewer, b.`id_member` as reviewerid
        FROM es_product_review a 
		INNER JOIN es_member b 
        ON a.`member_id` = b.`id_member`
        AND  a.`product_id` = :id AND a.`is_show` = 1
        AND a.`p_reviewid` = 0
        ORDER BY a.`id_review` DESC
        LIMIT 5;
    </select>
	
    <select id="getMoreProductReviews">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`,DATE_FORMAT(a.`datesubmitted`, "%e-%b-%y %k:%i") as datesubmitted, b.`username` as reviewer, b.id_member as reviewerid
        FROM es_product_review a 
		INNER JOIN es_member b 
        ON a.`member_id` = b.`id_member`
        AND  a.`product_id` = :id AND a.`is_show` = 1
        AND :last_id > a.`id_review` AND a.`p_reviewid` = 0
        ORDER BY a.`id_review` DESC
        LIMIT 5;
    </select>

    <select id="getReviewReplies">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`,DATE_FORMAT(a.`datesubmitted`, "%e-%b-%y %k:%i") as datesubmitted, b.`username` as reviewer, b.`id_member` as reviewerid, a.`p_reviewid` as replyto
        FROM es_product_review a JOIN es_member b
        ON a.`member_id` = b.`id_member`
        AND a.`is_show` = 1 AND a.`p_reviewid` IN (?,?,?,?,?)
        AND a.`product_id` = ?
		ORDER BY a.`id_review` DESC
    </select>

	<select id="getAllowedReviewers">
		SELECT o.buyer_id
		FROM es_order_product op
		LEFT JOIN es_order o
			ON op.order_id = o.id_order
		WHERE op.product_id = :id
	</select>
	
    <select id="getUserItems">
        <!-- Didn't work in mysql 5.6 
        SELECT p.`id_product`,p.`name`, p.`brief`, p.`price`, p.`member_id`, p.`price`,
        AVG(COALESCE((r.`rating`),0)) as average_rating, COUNT(r.`rating`) as review_count,
        COALESCE(i.product_image_path,'') as product_image_path, p.`cat_id`, p.`is_delete`
        FROM es_product p
        LEFT JOIN es_product_review r ON p.`id_product` = r.`product_id` AND r.`is_show` = 1
        LEFT JOIN es_product_image i ON i.`product_id` = p.`id_product` AND i.`is_primary` = 1
        WHERE p.member_id = :id
        GROUP BY p.`id_product` ORDER BY p.lastmodifieddate DESC
        -->
         SELECT p.`id_product`,p.`name`, p.`brief`, p.`price`, p.`member_id`, 
         AVG(COALESCE((r.`rating`),0)) as average_rating, COUNT(r.`rating`) as review_count, 
         COALESCE(i.product_image_path,'') as product_image_path, p.`cat_id`, p.`is_delete` 
         FROM es_product p 
         LEFT JOIN es_product_review r ON p.`id_product` = r.`product_id` AND r.`is_show` = 1 
         LEFT JOIN es_product_image i ON i.`product_id` = p.`id_product` AND i.`is_primary` = 1 
         WHERE p.member_id = :id
         GROUP BY p.`id_product`, p.`name`, p.`brief`, p.`price`, p.`member_id`, i.product_image_path, p.`is_delete`,p.`cat_id`,p.lastmodifieddate 
         ORDER BY p.lastmodifieddate DESC 
    </select>
	
    <select id="getCatItemsWithImage">
        SELECT A.id_cat,A.NAME,A.parent_id,B.path 
        FROM es_cat AS A,es_cat_img AS B
        WHERE A.id_cat = B.id_cat AND A.parent_id = :cat_id AND A.id_cat != 1 AND is_main = 1;
    </select>
    
    <select id="getProduct_withImage">
        SELECT `name` AS `product`,`id_product`,`cat_id`, `product_image_path`, `price`
        FROM `es_product` a
        LEFT JOIN `es_product_image` b ON b.`product_id` = a.`id_product` AND b.is_primary = '1'
        WHERE `id_product` = :id;
    </select>
    
    <select id="getPopularitem">
		SELECT `name` AS `product`,`id_product`,`cat_id`,`clickcount`, `product_image_path` ,`price`
        FROM `es_product` a
        LEFT JOIN `es_product_image` b ON b.`product_id` = a.`id_product` AND b.is_primary = '1'
        WHERE a.`is_delete` = 0 AND `cat_id` IN 
        <!-- Rest of query completed in the model: -->
        <!-- (:cat_id) ORDER BY `clickcount` DESC LIMIT :limit; -->
    </select>

    <select id="getAvailableBrand">
        SELECT 
        a.`id_cat_brand`
        , a.`cat_id`
        , a.`brand_id` as `brand_id`
        , b.`name` AS `name`
        FROM
        `es_cat_brand` a
        , `es_brand` b 
        WHERE a.`brand_id` = b.`id_brand` 
        AND `cat_id` = :cat_id
    </select>

    <select id="selectAttributeNameWithNameAndId">
        SELECT 
          es_attr_lookuplist_item.`name`
          , main_tbl.id_attr 
        FROM
          `es_attr_lookuplist_item` 
          LEFT JOIN 
            (SELECT 
              es_attr.id_attr AS id_attr
              , es_attr_lookuplist.`id_attr_lookuplist` AS id_attr_lookuplist
              , es_attr.attributeName AS attributeName 
            FROM
              `es_attr_lookuplist` 
              LEFT JOIN 
                (SELECT 
                  `id_attr`
                  , `name` AS attributeName
                  , `attr_lookuplist_id` 
                FROM
                  es_attr) es_attr 
                ON es_attr_lookuplist.`id_attr_lookuplist` = es_attr.attr_lookuplist_id) main_tbl 
            ON main_tbl.id_attr_lookuplist = `es_attr_lookuplist_item`.`attr_lookuplist_id` 
        WHERE es_attr_lookuplist_item.`name` = :name
          AND main_tbl.id_attr = :id

    </select>
    
    <select id="selectAttributeNameWithTypeAndId">
        SELECT 'NO LIST ITEM' as `name`, a.id_attr FROM es_attr a
        LEFT JOIN es_attr_lookuplist b ON b.id_attr_lookuplist = a.attr_lookuplist_id
        WHERE id_attr = :id_attr AND a.datatype_id = :datatype_id
    </select>
    

    <select id="addNewProduct_es_product">
        INSERT INTO `es_product`
        (
        `name`
        , `sku`
        , `brief`
        , `description`
        , `keywords`
        , `brand_id`
        , `cat_id`
        , `style_id`
        , `member_id`
        , `price`
        , `condition`
        ,`createddate`
        ,`lastmodifieddate`
        ,`cat_other_name`)
        VALUES 
        (
        :name
        , :sku
        , :brief
        , :description
        , :keywords
        , :brand_id
        , :cat_id
        , :style_id
        , :member_id
        , :price
        , :condition
        ,NOW()
        ,NOW()
        , :cat_other_name)
    </select>

    <select id="addNewAttribute">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewAttribute_other_1">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewAttribute_other_2">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewProductImage">
        INSERT INTO `es_product_image`
        (
        `product_image_path`
        , `product_image_type`
        , `product_id`
        , `is_primary`)
        VALUES (
        :product_image_path
        ,  :product_image_type
        ,  :product_id
        ,  :is_primary
        )
    </select>

    <select id="addNewAttributeOtherName">
        INSERT INTO `es_optional_attrhead`
        (
        `product_id`
        , `field_name`
        )
        VALUES ( 
        :product_id
        , :field_name
        );
    </select>

    <select id="addNewAttributeOtherNameValue">
        INSERT INTO `es_optional_attrdetail`
        ( `head_id`
        , `value_name`
        , `value_price`
        , `product_img_id`)
        VALUES ( :head_id
        , :value_name
        , :value_price
        , :product_img_id);

    </select>

    <select id="addNewCombination">
        INSERT INTO  `es_product_item`
        (`product_id`
        , `quantity`)
        VALUES ( :product_id
        , :qty);
    </select>

    <select id="selectProductAttribute">

        SELECT 
          `id_product_attr`
          , product_id
          , attr_value 
        FROM
          es_product_attr 
        WHERE attr_value = 
          (SELECT 
            `name` 
          FROM
            `es_attr_lookuplist_item` 
          WHERE `id_attr_lookuplist_item` = :lookupId) 
          AND product_id = :productID
          LIMIT 0,1
    </select>

    <select id="selectProductAttributeOther">
        SELECT 
          b.`id_optional_attrdetail` 
        FROM
          `es_optional_attrhead` a
          , `es_optional_attrdetail` b 
        WHERE a.`id_optional_attrhead` = b.`head_id` 
          AND a.`product_id` = :productID
          AND b.`value_name` = :valueName
    </select>

    <select id="addNewCombinationAtrribute">

        INSERT INTO `es_product_item_attr`
        (  `product_id_item`
        , `product_attr_id`
        ,`is_other`)
        VALUES ( 
        :product_id_item
        , :product_attr_id
        ,:is_other);

    </select>

 
    <select id="getAttributeByCategoryIdWithDistinct">
        SELECT DISTINCT(c.`name`)
        FROM 
        `es_product` a,
        `es_product_attr` b,
        `es_attr` c

        WHERE a.`id_product` = b.`product_id`
        AND b.`attr_id` = c.`id_attr`
        AND a.`cat_id`= :cat_id  ORDER BY name
</select>

 

    <select id="getAttributeByCategoryIdWithName">
        SELECT attr_value FROM 
        (
        SELECT DISTINCT(b.`attr_value`),c.`name`
        FROM 
        `es_product` a,
        `es_product_attr` b,
        `es_attr` c

        WHERE a.`id_product` = b.`product_id`
        AND b.`attr_id` = c.`id_attr`
        AND a.`cat_id`= :cat_id  ORDER BY NAME
        ) AS new_table WHERE NAME = :name
</select>



<select id="itemSearchNoCategory">
    SELECT 
      main_tbl.*
      , es_product_image.product_image_path 
    FROM
      `es_product_image` 
      LEFT JOIN 
        (SELECT 
          `id_product` AS product_id
          , `name` AS product_name
          , `price` AS product_price
          , `brief` AS product_brief
          , `condition` AS product_condition 
        FROM
          `es_product` 
        WHERE is_delete = 0 
          AND MATCH(NAME, keywords) AGAINST (:words IN BOOLEAN MODE) 
          ) AS main_tbl 
        ON main_tbl.product_id = es_product_image.`product_id` 
    WHERE `es_product_image`.`is_primary` = 1 
      AND main_tbl.product_id = es_product_image.`product_id` 
    LIMIT :start, :per_page   
</select> 

 

<select id="itemKeySearch">
        SELECT DISTINCT(`keywords`) FROM `es_product` WHERE is_delete = 0 AND MATCH(`name`, keywords) AGAINST (:words IN BOOLEAN MODE)
</select>

    <select id="fullDeleteItem">
        CALL `es_sp_FullDelete_product`(:productid, :memberid)
</select>

    <select id="updateIsDelete">
        UPDATE `es_product` SET is_delete = :is_delete where member_id = :memberid AND id_product = :productid
</select>


<select id="checkifexistcategory">
        SELECT COUNT(id_cat) AS cnt FROM `es_cat` WHERE id_cat = :cat_id
</select>


<select id="getProductByVendor">
	SELECT id_product, name, price, lastmodifieddate, clickcount, quantity
	FROM `es_product`
	WHERE `member_id` = :sellerid
</select>
<select id="addCategory">
    INSERT INTO `es_cat`
        (
             `name`,
             `description`,
             `keywords`,
             `parent_id`,
             `sort_order`,
             `is_main`)
    VALUES 
        (
            :name,
            :description,
            :keywords,
            :parent_id,
            :sort_order,
            :is_main);
</select>

<select id="getProductEdit">
	SELECT `id_product`, `cat_id`, `brand_id`,`name`, `condition`, `brief`, `description`, `sku`, `price`, `keywords`  
	FROM es_product WHERE id_product = :product_id AND member_id = :member_id
</select>

<select id="editProduct">
    UPDATE es_product SET 
    `name` = :name, `sku` = :sku, `brief` = :brief, `description` = :description,
    `keywords` = :keywords, `brand_id` = :brand_id, `style_id` = :style_id, `price` = :price,
    `condition` = :condition, `lastmodifieddate` = NOW() 
    WHERE `id_product` = :p_id AND `member_id` = :member_id;
</select>

<select id="deleteAttribute">
    DELETE FROM es_product_attr WHERE `product_id` = :product_id AND `attr_id` = :attr_id;
</select>

<select id="deleteProductImage">
    DELETE FROM es_product_image WHERE `product_id` = :product_id AND `id_product_image` = :image_id;
</select>

<select id="updateImageIsPrimary">
	UPDATE es_product_image SET `is_primary` = :is_primary WHERE `id_product_image` = :image_id;
</select>

<select id="getProductCount">
    SELECT count(`id_product`) as product_count from es_product WHERE `is_delete` = 0 AND `cat_id` IN <!-- rest of query is completed in the model -->
</select>

<select id="deleteOtherDetail">
    DELETE FROM es_optional_attrdetail WHERE head_id = :head_id;
</select>

<select id="deleteOtherHead">
    DELETE FROM es_optional_attrhead WHERE id_optional_attrhead = :head_id;
</select>

<select id="getProductQuantity">
    SELECT a.id_product_item, a.quantity, COALESCE(b.product_attr_id,0) as product_attr_id  FROM es_product_item a
    LEFT JOIN es_product_item_attr b ON b.product_id_item = a.id_product_item 
    WHERE a.product_id = :product_id
</select>

<select id="getProductQuantityVerbose">
    SELECT a.id_product_item, a.quantity, COALESCE(b.product_attr_id,0) as product_attr_id , 
    COALESCE(d.id_attr_lookuplist_item,0) as attr_lookuplist_item_id 
    FROM es_product_item a
    LEFT JOIN es_product_item_attr b ON b.product_id_item = a.id_product_item 
    LEFT JOIN es_product_attr c ON c.id_product_attr = b.product_attr_id
    LEFT JOIN es_attr_lookuplist_item d ON LCASE(d.name) = LCASE(c.attr_value)
    WHERE a.product_id = :product_id
</select>

<select id = 'getCatFast'>
    SELECT COALESCE(a.name,'') as level1_name,COALESCE(a.id_cat,'') as level1_id,
    COALESCE(b.name,'') as level2_name,COALESCE(b.id_cat,'') as level2_id,
    COALESCE(c.name,'') as level3_name,COALESCE(c.id_cat,'') as level3_id,
    d.path as img_level1
    FROM es_cat a
    LEFT JOIN es_cat b ON b.parent_id = a.id_cat AND b.is_main = 1
    LEFT JOIN es_cat c ON c.parent_id = b.id_cat AND c.is_main = 1
    LEFT JOIN es_cat_img d ON d.id_cat = a.id_cat
    WHERE a.parent_id = 1 AND a.id_cat != 1 AND a.is_main = 1
</select>


<!-- Product_upload step 3 -->

<select id="getLocation">
    SELECT e1.id_location, e1.location, e2.id_location as id_region, e2.location as region, e3.id_location as id_cityprov, e3.location as cityprov
    FROM es_location_lookup e1
    LEFT JOIN es_location_lookup e2
        ON e2.parent_id = e1.id_location AND e1.type = 1 AND e2.type = 2
    LEFT JOIN es_location_lookup e3
        ON e3.parent_id = e2.id_location AND e3.type = 3 AND e2.type = 2
    WHERE e1.type = 1
</select>

<select id="getCourier">
	SELECT id_courier, name as courier_name
	FROM es_courier_lookup
</select>

<select id="getPrdShippingAttr">
	SELECT piattr.product_id_item, pattr.attr_value
    FROM es_product_item pitm
    LEFT JOIN es_product_item_attr piattr
        ON pitm.id_product_item = piattr.product_id_item
    LEFT JOIN es_product_attr pattr
        ON piattr.product_attr_id = pattr.id_product_attr
    WHERE pitm.product_id = :id
</select>
	
<select id="storeShippingPrice">
    INSERT INTO es_product_shipping_price (location_id, price)
    VALUES (:location_id, :price)
</select>
<!--
<select id="storeProductShippingMap">
    INSERT INTO es_product_shipping_map (shipping_id, product_item_id, courier_id)
    VALUES (:shipping_id, :product_item_id, :courier_id)
</select>
-->
<select id="storeProductShippingMap">
    INSERT INTO es_product_shipping_map (shipping_id, product_item_id)
    VALUES (:shipping_id, :product_item_id)
</select>

<select id="searchCategory">
    SELECT `id_cat`, `name` FROM `es_cat` WHERE MATCH(`name`) AGAINST (CONCAT(:sch_string,'*') IN BOOLEAN MODE)
</select>


</map>