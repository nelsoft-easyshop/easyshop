<?xml version='1.0' ?>
<map>
    
    <select id="selectCategoryDetails">
        SELECT
        c.`id_cat`
        , c.`name`
        , c.`description`
        , c.`keywords`
        , c.`parent_id`
        , c.`sort_order`
        , c.`is_main` 
        , c.`slug`
        , COALESCE(i.path, '') as imagepath
        FROM `es_cat` c
        LEFT JOIN es_cat_img i  ON c.id_cat = i.id_cat
        WHERE c.id_cat = :id_cat
        LIMIT 1
    </select>
    
    <select id="selectFirstLevel">
        SELECT c.name,c.description,c.keywords,c.id_cat, c.slug, c.sort_order,c.parent_id,c.is_main, i.path
        FROM es_cat c
        LEFT JOIN es_cat_img i ON c.id_cat = i.id_cat
        WHERE c.parent_id = 1
    </select>

    <select id="selectDownLevel">
        SELECT
        name,
        description,
        keywords,
        id_cat,
        parent_id,
        is_main,
        slug
        FROM es_cat
        WHERE parent_id = ? 
    </select>

    <select id="selectChild">
     SELECT 
     CASE
     WHEN `GetFamilyTree` (id_cat) = '' 
     THEN '0,0' 
     ELSE `GetFamilyTree` (id_cat) 
     END 
     FROM
     `es_cat` 
     WHERE id_cat != 1 
     AND id_cat = :cat_id ;
    </select>

    <select id="getParent">
        SELECT T2.id_cat, T2.name, T2.slug
        FROM (
        SELECT
        @r AS _id,
        (SELECT @r := parent_id FROM es_cat WHERE id_cat = _id) AS parent_id,
        @l := @l + 1 AS lvl
        FROM
        (SELECT @r := :id, @l := 0) vars,
        es_cat h
        WHERE @r != 1) T1
        JOIN es_cat T2
        ON T1._id = T2.id_cat
        ORDER BY T1.lvl DESC
    </select>

    <select id="getLookupListItem">
        SELECT 
        *
        FROM es_attr_lookuplist_item 
        WHERE attr_lookuplist_id = :id
    </select>
    
    <select id="getProductCategory">
        SELECT cat_id FROM es_product WHERE id_product = :id AND member_id = :member_id
    </select>
    
    <select id="editProductCategory">
        UPDATE es_product SET cat_id = :cat_id, is_draft = 1 WHERE id_product = :id AND member_id = :member_id
    </select>

    <select id="getProductBySlug">
        CALL `es_sp_getProductBySlug` (:slug)
    </select>
    
    <select id="getProductBySlugNoIncrement">
        SELECT p.id_product as id_product, p.slug as slug, p.is_meetup, p.promo_type, p.condition, p.slug,p.brand_id as brand_id, p.brand_other_name as custombrand, p.name as product_name, p.description as description, 
        p.is_promote, p.startdate, p.enddate, p.cat_id as cat_id, p.price as price,  p.brief as brief, p.sku as sku, i.`product_image_path`,
        p.is_sold_out, p.is_cod, p.discount, s.name as style_name, b.name as brand_name, p.member_id as sellerid, m.nickname as sellernickname, m.username as sellerusername,  m.slug as sellerslug, m.imgurl as userpic, '1' as o_success, '' as o_message
        FROM es_product p 
        LEFT JOIN es_style s ON p.style_id = s.id_style
        LEFT JOIN es_brand b ON p.brand_id = b.id_brand
        LEFT JOIN es_member m on p.member_id = m.id_member 
        LEFT JOIN `es_product_image` i ON i.`product_id` = p.`id_product` AND i.is_primary = '1'
        WHERE p.slug = :slug AND p.is_delete = 0 AND p.is_draft = 0;                
    </select>
    
    
    <select id="getProductById">
        SELECT a.`name` AS `product`, a.`slug` AS slug, a.is_sold_out, a.`discount`, a.`brief`,a.`id_product`,`cat_id`, b.`product_image_path`, a.`price`, a.`member_id` as sellerid , a.`is_promote`,a.`startdate`,a.`enddate`, a.`promo_type`,a.`is_draft`,a.`is_delete`
        FROM `es_product` a
        LEFT JOIN `es_product_image` b ON b.`product_id` = a.`id_product` AND b.is_primary = '1'
        WHERE `id_product` = :id
    </select>
    
    <select id="getProductByIdExtended">
        SELECT p.id_product AS id_product, p.condition, p.is_sold_out,p.brand_id AS brand_id, p.brand_other_name AS custombrand, 
        p.name AS product_name, p.description AS description, p.is_promote, p.discount,
        p.cat_id AS cat_id, p.price AS price, p.brief AS brief, p.sku AS sku,
        s.name AS style_name, b.name AS brand_name, p.member_id AS sellerid, m.nickname AS sellernickname, 
        m.username AS sellerusername, m.imgurl AS userpic, c.name AS category, i.`product_image_path`,     
        p.`is_promote`,p.`startdate`,p.`enddate`, p.`promo_type`, p.`slug` AS slug, p.is_cod, p.is_meetup, p.billing_info_id, p.cat_other_name
        FROM es_product p 
        LEFT JOIN es_style s ON p.style_id = s.id_style
        LEFT JOIN es_brand b ON p.brand_id = b.id_brand
        LEFT JOIN es_member m ON p.member_id = m.id_member  
        LEFT JOIN es_cat c ON p.`cat_id` = c.`id_cat`
        LEFT JOIN `es_product_image` i ON i.`product_id` = p.`id_product` AND i.is_primary = '1'
        WHERE p.id_product = :id
    </select>
  
    
    <select id="getProductAttributes">
        SELECT h.field_name as name, h.id_optional_attrhead as 'name_id', d.value_name as attr_value, d.id_optional_attrdetail as 'attr_value_id' , d.value_price as attr_price, COALESCE(i.product_image_path,'') as product_image_path, 'option' as 'type', COALESCE(i.id_product_image,0) as 'img_id', '0' as 'datatype_id'
        FROM es_optional_attrhead h 
        LEFT JOIN es_optional_attrdetail d ON h.id_optional_attrhead = d.head_id
        LEFT JOIN es_product_image i ON d.product_img_id = i.id_product_image
        WHERE h.product_id=:id
        UNION
        SELECT  b.name, b.id_attr,  a.attr_value, a.id_product_attr, a.attr_price, '', 'specific', '0', b.datatype_id
        FROM es_product_attr a 
        LEFT JOIN  es_attr b on a.attr_id = b.id_attr
        WHERE a.product_id =:id
    </select>
    
    <select id="getProductImages">
        SELECT product_image_path, id_product_image, is_primary FROM es_product_image WHERE product_id = :id
        ORDER BY is_primary DESC
    </select>
  
    <select id="getProducts">
     SELECT 
  COUNT(*) AS cnt_all
  , item_list_attribute.product_id
  , item_list_attribute.slug
  , item_list_attribute.brand_id
  , item_list_attribute.product_image_path
  , item_list_attribute.`name`
  , item_list_attribute.`price`
  , item_list_attribute.`condition`
  , item_list_attribute.`brief`
  , item_list_attribute.`is_hot`
  , item_list_attribute.`is_new`
  , item_list_attribute.`clickcount`
  , item_list_attribute.`promo_type`
  , item_list_attribute.`is_promote`
  , item_list_attribute.`startdate`
  , item_list_attribute.`enddate`
  , item_list_attribute.`discount`
  , item_list_attribute.`is_sold_out`
  , item_list_attribute.`search_keyword`
FROM
  (SELECT 
    `item_list_attribute_only`.*
    , item_list.* 
  FROM
    (SELECT 
  COALESCE(es_product_attr_temp.cnt,0) AS cnt
  , es_product.`id_product` AS product_id
  , COALESCE(es_product_attr_temp.attr_name,0) AS attr_name
  , COALESCE(es_product_attr_temp.attr_value,0) AS attr_value 
FROM
  `es_product` 
  LEFT OUTER JOIN 
    (SELECT 
      COUNT(*) AS cnt
      , a.product_id
      , b.name AS attr_name
      , a.attr_value 
    FROM
      `es_product_attr` a
      , `es_attr` b 
    WHERE a.`attr_id` = b.`id_attr` 
    GROUP BY a.product_id
      , attr_name
      , attr_value) AS es_product_attr_temp 
    ON `es_product`.`id_product` = `es_product_attr_temp`.`product_id` 
    UNION
    ALL 
    SELECT 
      COUNT(*) AS cnt
      , a.product_id
      , a.`field_name` AS attr_name
      , b.value_name AS attr_value 
    FROM
      `es_optional_attrhead` a
      , `es_optional_attrdetail` b 
    WHERE a.`id_optional_attrhead` = b.`head_id` 
    GROUP BY a.product_id
      , field_name
      , value_name) AS `item_list_attribute_only`
    , 
    (SELECT 
      a.id_product
      , a.`slug`
      , a.`name`
      , a.brief
      , a.price
      , a.`condition`
      , a.brand_id
      , c.`name` AS brand
      , a.`cat_id`
      , d.`name` AS category_name
      , a.`cat_other_name`
      , b.`product_image_path`
      , a.`is_delete`
      , a.`is_draft`
      , a.`is_hot`
      , a.`is_new`
      , a.`clickcount`
      , a.`is_real`
      , a.`is_promote`
      , a.`keywords`
      , a.`member_id`
      , a.`createddate`
      , a.`lastmodifieddate`
      , a.`sku`
      , a.`promo_type`
      , a.`enddate`
      , a.`startdate`
      , a.`discount`
      , a.`is_sold_out`
      , a.`search_keyword`
    FROM
      `es_product` a
      , `es_product_image` b
      , `es_brand` c
      , `es_cat` d 
    WHERE a.id_product = b.product_id 
      AND a.`brand_id` = c.`id_brand` 
      AND a.`cat_id` = d.`id_cat` 
      AND b.is_primary = 1) AS item_list 
  WHERE `item_list`.`id_product` = `item_list_attribute_only`.`product_id`) AS item_list_attribute 
    </select>

    <select id="getProductAndAttributes">
          SELECT 
           item_list_attribute.attr_name,
           item_list_attribute.attr_value
          FROM
            (SELECT 
              `item_list_attribute_only`.*
              , item_list.* 
            FROM
              (SELECT 
                COUNT(*) AS cnt
                , a.product_id
                , b.name AS attr_name
                , a.attr_value 
              FROM
                `es_product_attr` a
                , `es_attr` b 
              WHERE a.`attr_id` = b.`id_attr` 
              AND b.datatype_id NOT IN (2)
              GROUP BY a.product_id
                , attr_name
                , attr_value 
              UNION
              ALL 
              SELECT 
                COUNT(*) AS cnt
                , a.product_id
                , a.`field_name` AS attr_name
                , b.value_name AS attr_value 
              FROM
                `es_optional_attrhead` a
                , `es_optional_attrdetail` b 
              WHERE a.`id_optional_attrhead` = b.`head_id` 
              GROUP BY a.product_id
                , field_name
                , value_name) AS `item_list_attribute_only`
              , 
              (SELECT 
                a.id_product
                , a.`name`
                , a.brief
                , a.price
                , a.`condition`
                , a.brand_id
                , c.`name` AS brand
                , a.`cat_id`
                , d.`name` AS category_name
                , a.`cat_other_name`
                , b.`product_image_path`
                , a.`is_delete`
                , a.`is_draft`
                , a.`is_hot`
                , a.`is_new`
                , a.`clickcount`
                , a.`is_real`
                , a.`is_promote`
                , a.`keywords`
                , a.`member_id`
                , a.`createddate`
                , a.`lastmodifieddate`
                , a.`quantity`
                , a.`sku` 
              FROM
                `es_product` a
                , `es_product_image` b
                , `es_brand` c
                , `es_cat` d 
              WHERE a.id_product = b.product_id 
                AND a.`brand_id` = c.`id_brand` 
                AND a.`cat_id` = d.`id_cat` 
                AND b.is_primary = 1) AS item_list 
            WHERE `item_list`.`id_product` = `item_list_attribute_only`.`product_id`) AS item_list_attribute 
           
    </select>
  
  
    <select id="getBrandsByCategory">
        SELECT p.name as productname, b.name as brandname from es_product p
        LEFT JOIN es_brand b ON b.id_brand = p.brand_id
        WHERE p.cat_id = :cat_id  GROUP BY id_brand ORDER BY b.sort_order ASC
    </select>
  
    <select id="submitReview">
        INSERT INTO es_product_review 
        (`member_id`, `product_id`, `datesubmitted`, `rating`, `title`, `review`, `is_show`) VALUES 
        (:member_id, :product_id ,NOW(), :rating, :title, :review, '1')
    </select>

    <select id="addReply">
        INSERT INTO es_product_review (`product_id`, `review`, `is_show`, `p_reviewid`, `member_id`, `datesubmitted`)
        VALUES (:product_id, :review, '1', :p_reviewid, :member_id, NOW())
    </select>
    
    <select id="getRecentProductReviews">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`, DATE_FORMAT(a.`datesubmitted`, "%e-%b-%Y %k:%i") as datesubmitted, b.`username` as reviewer, b.`id_member` as reviewerid, DATE_FORMAT(a.`datesubmitted`, "%Y-%m-%d") as ISOdate
        FROM es_product_review a 
        INNER JOIN es_member b 
        ON a.`member_id` = b.`id_member`
        AND  a.`product_id` = :id AND a.`is_show` = 1
        AND a.`p_reviewid` = 0
        ORDER BY a.`id_review` DESC
        LIMIT 5;
    </select>
    
    <select id="getMoreProductReviews">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`,DATE_FORMAT(a.`datesubmitted`, "%e-%b-%y %k:%i") as datesubmitted, b.`username` as reviewer, b.id_member as reviewerid
        FROM es_product_review a 
        INNER JOIN es_member b 
        ON a.`member_id` = b.`id_member`
        AND  a.`product_id` = :id AND a.`is_show` = 1
        AND :last_id > a.`id_review` AND a.`p_reviewid` = 0
        ORDER BY a.`id_review` DESC
        LIMIT 5;
    </select>

    <select id="getReviewReplies">
        SELECT a.`id_review`, a.`title`, a.`review`, a.`rating`,DATE_FORMAT(a.`datesubmitted`, "%e-%b-%y %k:%i") as datesubmitted, b.`username` as reviewer, b.`id_member` as reviewerid, a.`p_reviewid` as replyto
        FROM es_product_review a JOIN es_member b
        ON a.`member_id` = b.`id_member`
        AND a.`is_show` = 1 AND a.`p_reviewid` IN (?,?,?,?,?)
        AND a.`product_id` = ?
        ORDER BY a.`id_review` DESC
    </select>

    <select id="getAllowedReviewers">
        SELECT o.buyer_id
        FROM es_order_product op
        LEFT JOIN es_order o
            ON op.order_id = o.id_order
        WHERE op.product_id = :id
    </select>
    
    <select id="getUserItemCount">
        SELECT COUNT(CASE WHEN p.is_delete = 0 AND p.is_draft = 0 THEN 1 END) as active, COUNT(CASE WHEN p.is_delete = 1 AND p.is_draft = 0 THEN 1 END) as deleted, COUNT(CASE WHEN p.is_delete = 0 AND p.is_draft = 1 THEN 1 END) as draft,
            (SELECT SUM(order_quantity) 
                FROM es_order_product op
                LEFT JOIN es_order o
                    ON o.id_order = op.order_id
                WHERE op.seller_id = :member_id AND o.order_status NOT IN (2,99) AND op.status NOT IN (2,5,6) ) as sold
        FROM es_product p
        WHERE p.member_id = :member_id;
    </select>
    
    <select id="getUserItemSearchCount">
        SELECT COUNT(id_product) as product_count
        FROM es_product
        WHERE name LIKE :schval AND member_id = :member_id AND is_draft = :draft_status AND is_delete = :delete_status
    </select>
    
    <select id="getUserItems">
        SELECT p.`slug`, p.`discount`, p.`is_promote`, p.`startdate`, p.`enddate`, p.`promo_type`, p.`is_sold_out`, p.`id_product`,p.`name`, p.`brief`, p.`price`, p.`member_id`, p.`cat_other_name` ,
        AVG(COALESCE((r.`rating`),0)) as average_rating, COUNT(r.`rating`) as review_count, 
        COALESCE(i.product_image_path,'') as product_image_path, p.`cat_id`, p.`is_delete` ,
        SUM(pi.quantity) as availability, COALESCE(order_product_temp.sum_quantity, 0) as sold,p.lastmodifieddate
        FROM es_product p 
        LEFT JOIN es_product_review r ON p.`id_product` = r.`product_id` AND r.`is_show` = 1 
        LEFT JOIN es_product_image i ON i.`product_id` = p.`id_product` AND i.`is_primary` = 1 
        LEFT JOIN es_product_item pi ON pi.product_id = p.id_product
        LEFT JOIN (SELECT product_id, SUM(order_quantity) as sum_quantity FROM es_order_product op
                LEFT JOIN es_order o ON o.id_order = op.order_id
                WHERE op.status NOT IN (2,5,6) AND op.seller_id != o.buyer_id AND o.order_status NOT IN (2,99) GROUP BY product_id) order_product_temp
                ON order_product_temp.product_id = p.id_product
        WHERE p.member_id = :id AND p.is_draft = :draft_status AND p.is_delete = :delete_status AND p.name LIKE :name_filter
        GROUP BY p.`id_product`, p.`slug`, p.`name`, p.`brief`, p.`price`, p.`member_id`, i.product_image_path, p.`is_delete`,p.`cat_id`,p.lastmodifieddate,order_product_temp.sum_quantity,
        p.discount, p.is_promote, p.startdate, p.enddate, p.promo_type, p.is_sold_out
        ORDER BY {order_filter} {order_sequence_filter}
        LIMIT :start, :number
    </select>
    


    <select id="getPopularitem">
    SELECT `name` AS `product`, `is_sold_out` , `slug` AS `slug`, `id_product`,`cat_id`,`clickcount`, `product_image_path` ,`price`, `is_promote`, `discount`,
    `startdate`, `enddate`, `promo_type` FROM `es_product` a
        LEFT JOIN `es_product_image` b ON b.`product_id` = a.`id_product` AND b.is_primary = '1'
        WHERE a.`is_delete` = 0 AND a.`is_draft` = 0 AND  a.`is_sold_out` = 0 AND `cat_id` IN 
        <!-- Rest of query completed in the model: -->
        <!-- (:cat_id) ORDER BY `clickcount` DESC LIMIT :limit; -->
    </select>

    <select id="getAvailableBrand">
        SELECT 
        a.`id_cat_brand`
        , a.`cat_id`
        , a.`brand_id` as `brand_id`
        , b.`name` AS `name`
        FROM
        `es_cat_brand` a
        , `es_brand` b 
        WHERE a.`brand_id` = b.`id_brand` 
        AND `cat_id` = :cat_id
    </select>

    <select id="selectAttributeNameWithNameAndId">
        SELECT 
          es_attr_lookuplist_item.`name`
          , main_tbl.id_attr 
        FROM
          `es_attr_lookuplist_item` 
          LEFT JOIN 
            (SELECT 
              es_attr.id_attr AS id_attr
              , es_attr_lookuplist.`id_attr_lookuplist` AS id_attr_lookuplist
              , es_attr.attributeName AS attributeName 
            FROM
              `es_attr_lookuplist` 
              LEFT JOIN 
                (SELECT 
                  `id_attr`
                  , `name` AS attributeName
                  , `attr_lookuplist_id` 
                FROM
                  es_attr) es_attr 
                ON es_attr_lookuplist.`id_attr_lookuplist` = es_attr.attr_lookuplist_id) main_tbl 
            ON main_tbl.id_attr_lookuplist = `es_attr_lookuplist_item`.`attr_lookuplist_id` 
        WHERE es_attr_lookuplist_item.`name` = :name
          AND main_tbl.id_attr = :id

    </select>
    
    <select id="selectAttributeNameWithTypeAndId">
        SELECT 'NO LIST ITEM' as `name`, a.id_attr FROM es_attr a
        LEFT JOIN es_attr_lookuplist b ON b.id_attr_lookuplist = a.attr_lookuplist_id
        WHERE id_attr = :id_attr AND a.datatype_id = :datatype_id
    </select>
    

    <select id="addNewProduct_es_product">
        INSERT INTO `es_product`
        (
        `name`
        , `sku`
        , `brief`
        , `description`
        , `keywords`
        , `brand_id`
        , `cat_id`
        , `style_id`
        , `member_id`
        , `price`
        , `discount`
        , `condition`
        ,`createddate`
        ,`lastmodifieddate`
        ,`cat_other_name`
        ,`brand_other_name`
        ,`search_keyword`
        ,`is_draft`
        ,`enddate`
        ,`startdate`)
        VALUES 
        (
        :name
        , :sku
        , :brief
        , :description
        , :keywords
        , :brand_id
        , :cat_id
        , :style_id
        , :member_id
        , :price
        , :discount
        , :condition
        , :createdate
        , :lastmodifieddate
        , :cat_other_name
        , :brand_other_name
        , :search_keyword
        , '1'
        , :enddate
        , :startdate
        )
    </select>

    <select id="addNewAttribute">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewAttribute_other_1">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewAttribute_other_2">
        INSERT INTO `es_product_attr`
        (
        `product_id`
        , `attr_id`
        , `attr_value`
        , `attr_price`)
        VALUES (
        :product_id
        , :attr_id
        , :attr_value
        , :attr_price);
    </select>

    <select id="addNewProductImage">
        INSERT INTO `es_product_image`
        (
        `product_image_path`
        , `product_image_type`
        , `product_id`
        , `is_primary`)
        VALUES (
        :product_image_path
        ,  :product_image_type
        ,  :product_id
        ,  :is_primary
        )
    </select>

    <select id="addNewAttributeOtherName">
        INSERT INTO `es_optional_attrhead`
        (
        `product_id`
        , `field_name`
        )
        VALUES ( 
        :product_id
        , :field_name
        );
    </select>

    <select id="addNewAttributeOtherNameValue">
        INSERT INTO `es_optional_attrdetail`
        ( `head_id`
        , `value_name`
        , `value_price`
        , `product_img_id`)
        VALUES ( :head_id
        , :value_name
        , :value_price
        , :product_img_id);

    </select>

    <select id="addNewCombination">
        INSERT INTO  `es_product_item`
        (`product_id`
        , `quantity`)
        VALUES ( :product_id
        , :qty);
    </select>

    <select id="updateCombination">
        UPDATE es_product_item SET quantity = :qty WHERE product_id = :product_id AND id_product_item = :product_item_id
    </select>
    
    <select id="updateCombinationAtrribute">
        UPDATE es_product_item_attr SET product_attr_id = :product_attr_id, is_other = :is_other WHERE product_id_item = :product_id_item AND id_product_item_attr = :product_item_attr_id
    </select>
    
    <select id='selectProductItemAttr'>
        SELECT id_product_item_attr FROM es_product_item_attr WHERE product_id_item = :product_item_id AND product_attr_id = :product_attr_id AND is_other = :is_other
    </select>
    
    <select id="selectProductAttribute">

        SELECT 
          `id_product_attr`
          , product_id
          , attr_value 
        FROM
          es_product_attr 
        WHERE attr_value = 
          (SELECT 
            `name` 
          FROM
            `es_attr_lookuplist_item` 
          WHERE `id_attr_lookuplist_item` = :lookupId) 
          AND product_id = :productID
          LIMIT 0,1
    </select>

    <select id="selectProductAttributeOther">
        SELECT 
          b.`id_optional_attrdetail` 
        FROM
          `es_optional_attrhead` a
          , `es_optional_attrdetail` b 
        WHERE a.`id_optional_attrhead` = b.`head_id` 
          AND a.`product_id` = :productID
          AND b.`value_name` = :valueName
          AND a.`field_name` = :valueGroup
    </select>

    <select id="addNewCombinationAtrribute">

        INSERT INTO `es_product_item_attr`
        (  `product_id_item`
        , `product_attr_id`
        ,`is_other`)
        VALUES ( 
        :product_id_item
        , :product_attr_id
        ,:is_other);

    </select>

 
    <select id="getAttributeByCategoryIdWithDistinct">
        SELECT DISTINCT(c.`name`)
        FROM 
        `es_product` a,
        `es_product_attr` b,
        `es_attr` c

        WHERE a.`id_product` = b.`product_id`
        AND b.`attr_id` = c.`id_attr`
        AND a.`cat_id`= :cat_id  ORDER BY name
</select>

 

    <select id="getAttributeByCategoryIdWithName">
        SELECT attr_value FROM 
        (
        SELECT DISTINCT(b.`attr_value`),c.`name`
        FROM 
        `es_product` a,
        `es_product_attr` b,
        `es_attr` c

        WHERE a.`id_product` = b.`product_id`
        AND b.`attr_id` = c.`id_attr`
        AND a.`cat_id`= :cat_id  ORDER BY NAME
        ) AS new_table WHERE NAME = :name
</select>

<select id="itemKeySearch">
        SELECT DISTINCT(`keywords`) FROM `es_keywords` WHERE  MATCH(`keywords`) AGAINST (:words IN BOOLEAN MODE)
</select>



<select id="fullDeleteItem">
        CALL `es_sp_FullDelete_product`(:productid, :memberid)
</select>

<select id="updateIsDelete">
        UPDATE `es_product` SET is_delete = :is_delete, lastmodifieddate = NOW()  where member_id = :memberid AND id_product = :productid
</select>

<select id="checkifexistcategory">
        SELECT COUNT(id_cat) AS cnt FROM `es_cat` WHERE id_cat = :cat_id
</select>


<select id="getProductByVendor">
    SELECT id_product, name, price, lastmodifieddate, clickcount, quantity
    FROM `es_product`
    WHERE `member_id` = :sellerid
</select>

<select id="getProductEdit">
    SELECT a.`id_product`, a.`cat_id`, a.`brand_id`, b.name as 'brandname', a.brand_other_name,
    a.`name`, a.`condition`, a.`brief`, a.`description`, a.`discount`, a.`sku`, a.`price`, a.`keywords`, a.`slug`, COALESCE(a.`cat_other_name`,'') as otherCategory
    FROM es_product a LEFT JOIN es_brand b ON a.brand_id = b.id_brand
    WHERE id_product = :product_id AND member_id = :member_id
</select>

<select id="editProduct">
    UPDATE es_product SET 
    `name` = :name, `is_draft` = 1,`sku` = :sku, `brief` = :brief, `description` = :description,
    `keywords` = :keywords, `brand_id` = :brand_id, `style_id` = :style_id, `price` = :price,
    `condition` = :condition, `lastmodifieddate` = :modifieddate, `brand_other_name` = :brand_other_name,
    `discount` = :discount, `search_keyword` = :search_keyword, `is_sold_out` = :is_sold_out,
    `cat_other_name` = :cat_other_name, cat_id = :cat_id
    WHERE `id_product` = :p_id AND `member_id` = :member_id;
</select>

<select id="removeProductImage">
    DELETE FROM `es_product_image` WHERE `product_id` = :productId
</select>

<select id="removeProductOptionalAttributeDetails">
    DELETE FROM `es_optional_attrdetail` WHERE `head_id` IN (SELECT `id_optional_attrhead` FROM `es_optional_attrhead` WHERE `product_id` = :productId)
</select>

<select id="removeProductOptionalAttributeHead">
    DELETE FROM `es_optional_attrhead` WHERE `product_id` = :productId
</select>

<select id="removeProductItemAttr">
    DELETE FROM `es_product_item_attr` WHERE `product_id_item` IN (SELECT `id_product_item` FROM `es_product_item` WHERE product_id = :productId)
</select>

<select id="removeProductItem">
    DELETE FROM `es_product_item` WHERE product_id = :productId
</select>

<select id="removeProductAttr">
    DELETE FROM es_product_attr WHERE `product_id` = :productId
</select>

<select id="getShippingDetailsByItemId">
  SELECT a.*,b.* FROM `es_product_shipping_head` a,`es_product_shipping_detail` b WHERE a.`id_shipping` = b.`shipping_id`
  AND b.`product_item_id` = :itemId
</select>

<select id="deleteProductAttributeByIDs">
    DELETE FROM es_product_attr WHERE `product_id` = :product_id AND `attr_id` = :attr_id;
</select>

<select id="deleteProductAttributes">
    DELETE FROM es_product_attr WHERE `product_id` = :product_id;
</select>

<select id="deleteProductImage">
    DELETE FROM es_product_image WHERE `product_id` = :product_id AND `id_product_image` = :image_id;
</select>

<select id="updateImageIsPrimary">
    UPDATE es_product_image SET `is_primary` = :is_primary WHERE `id_product_image` = :image_id;
</select>

<select id="getProductCount">
    SELECT count(`id_product`) as product_count from es_product WHERE `is_delete` = 0 AND `is_draft` = 0 AND `cat_id` IN <!-- rest of query is completed in the model -->
</select>

<select id="deleteOtherDetail">
    DELETE FROM es_optional_attrdetail WHERE head_id = :head_id;
</select>

<select id="deleteOtherHead">
    DELETE FROM es_optional_attrhead WHERE id_optional_attrhead = :head_id;
</select>

<select id="getProductQuantity">
    SELECT a.id_product_item, a.quantity, COALESCE(b.product_attr_id,0) as product_attr_id,
    COALESCE(b.is_other,0) as is_other  FROM es_product_item a
    LEFT JOIN es_product_item_attr b ON b.product_id_item = a.id_product_item 
    WHERE a.product_id = :product_id
</select>

<select id="getProductQuantityVerbose">
    SELECT a.id_product_item, a.quantity, COALESCE(b.product_attr_id,0) as product_attr_id , 
    COALESCE(b.is_other,0) as is_other, COALESCE(d.id_attr_lookuplist_item,0) as attr_lookuplist_item_id,
    d.name as attr_value
    FROM es_product_item a
    INNER JOIN es_product_item_attr b ON b.product_id_item = a.id_product_item AND b.is_other = 0
    LEFT JOIN es_product_attr c ON c.id_product_attr = b.product_attr_id
    LEFT JOIN es_attr e ON e.id_attr =  c.attr_id
    LEFT JOIN es_attr_lookuplist_item d ON LCASE(d.name) = LCASE(c.attr_value) AND e.attr_lookuplist_id = d.attr_lookuplist_id
    WHERE a.product_id = :product_id
    
    UNION

    SELECT a.id_product_item, a.quantity, COALESCE(b.product_attr_id,0) as product_attr_id , 
    COALESCE(b.is_other,0) as is_other, '0' as attr_lookuplist_item_id, d.value_name
    FROM es_product_item a
    INNER JOIN es_product_item_attr b ON b.product_id_item = a.id_product_item AND b.is_other = 1
    LEFT JOIN es_optional_attrdetail d ON d.id_optional_attrdetail = b.product_attr_id
    WHERE a.product_id = :product_id
</select>

<select id = 'getCategoriesNavigation'>
    SELECT COALESCE(a.name,'') as level1_name,COALESCE(a.id_cat,'') as level1_id, COALESCE(a.slug,'') as level1_slug,
    COALESCE(b.name,'') as level2_name,COALESCE(b.id_cat,'') as level2_id, COALESCE(b.slug,'') as level2_slug,
    COALESCE(c.name,'') as level3_name,COALESCE(c.id_cat,'') as level3_id, COALESCE(c.slug,'') as level3_slug,
    d.path as img_level1
    FROM es_cat a
    LEFT JOIN es_cat b ON b.parent_id = a.id_cat AND b.is_main = 1
    LEFT JOIN es_cat c ON c.parent_id = b.id_cat AND c.is_main = 1
    LEFT JOIN es_cat_img d ON d.id_cat = a.id_cat
    WHERE a.parent_id = 1 AND a.id_cat != 1 AND a.is_main = 1
</select>


<!-- Product_upload step 3 -->

<select id="getProductItem">
    SELECT p.id_product, pi.id_product_item
    FROM es_product p
    INNER JOIN es_product_item pi
        ON p.id_product = pi.product_id AND p.id_product = :product_id AND p.member_id = :member_id
    ORDER BY p.id_product
</select>

<select id="getLocation">
    SELECT e1.id_location, e1.location, e2.id_location as id_region, e2.location as region, e3.id_location as id_cityprov, e3.location as cityprov
    FROM es_location_lookup e1
    LEFT JOIN es_location_lookup e2
        ON e2.parent_id = e1.id_location AND e1.type = 1 AND e2.type = 2
    LEFT JOIN es_location_lookup e3
        ON e3.parent_id = e2.id_location AND e3.type = 3 AND e2.type = 2
    WHERE e1.type = 1
</select>

<select id="getPrdShippingAttr">
    SELECT pitm.id_product_item, piattr.product_id_item, attr.name, pattr.attr_value, piattr.id_product_item_attr
    FROM es_product_item pitm
    LEFT JOIN es_product_item_attr piattr
        ON pitm.id_product_item = piattr.product_id_item AND piattr.is_other = 0
    LEFT JOIN es_product_attr pattr
        ON piattr.product_attr_id = pattr.id_product_attr
    LEFT JOIN es_attr attr
        ON pattr.attr_id = attr.id_attr 
    WHERE pitm.product_id = :id
    
    UNION
    
    SELECT pitm.id_product_item, piattr.product_id_item, oattrh.field_name, oattr.value_name, piattr.id_product_item_attr
    FROM es_product_item pitm
    LEFT JOIN es_product_item_attr piattr
        ON pitm.id_product_item = piattr.product_id_item AND piattr.is_other = 1
    LEFT JOIN es_optional_attrdetail oattr
        ON piattr.product_attr_id = oattr.id_optional_attrdetail
    LEFT JOIN es_optional_attrhead oattrh
        ON oattr.head_id = oattrh.id_optional_attrhead
    WHERE pitm.product_id = :id
</select>
    
<select id="storeShippingPrice">
    INSERT INTO es_product_shipping_head (location_id, price, product_id)
    VALUES (:location_id, :price, :product_id)
</select>

<select id="storeProductShippingMap">
    INSERT INTO es_product_shipping_detail (shipping_id, product_item_id)
    VALUES (:shipping_id, :product_item_id)
</select>

<select id="storeShippingPreferenceHead">
    INSERT INTO es_product_shipping_preference_head (title, member_id)
    VALUES (:title, :member_id)
</select>

<select id="storeShippingPreferenceDetail">
    INSERT INTO es_product_shipping_preference_detail (location_id, price, shipping_pref_head_id)
    VALUES (:loc, :price, :head_id)
</select>

<select id="getShippingPreferenceHead">
    SELECT id_shipping_pref_head
    FROM es_product_shipping_preference_head
    WHERE member_id = :member_id AND id_shipping_pref_head = :head_id
</select>

<select id="deleteShippingPreference">
    DELETE FROM es_product_shipping_preference_detail
    WHERE shipping_pref_head_id = :head_id;
    
    DELETE FROM es_product_shipping_preference_head
    WHERE id_shipping_pref_head = :head_id AND member_id = :member_id;
</select>

<select id="getShippingSummary">
    SELECT pi.id_product_item, COALESCE(loc.id_location,'0') as id_location, loc.location, COALESCE(sh.price,'0') as price, sd.id_shipping_detail
    FROM es_product_item pi
    LEFT JOIN es_product_shipping_detail sd
        ON sd.product_item_id = pi.id_product_item
    LEFT JOIN es_product_shipping_head sh
        ON sh.id_shipping = sd.shipping_id
    LEFT JOIN es_location_lookup loc
        ON sh.location_id = loc.id_location
    WHERE pi.product_id = :prod_id
</select>

<select id="getShippingPreference">
    SELECT sh.id_shipping_pref_head as head_id, sh.title, sd.location_id, sd.price
    FROM es_product_shipping_preference_head sh
    INNER JOIN es_product_shipping_preference_detail sd
        ON sh.id_shipping_pref_head = sd.shipping_pref_head_id AND sh.member_id = :member_id
</select>

<select id="deleteShippingDetail">
    DELETE FROM es_product_shipping_detail
    WHERE product_item_id IN (
</select>

<select id="getShippingIdFromShippingDetail">
    SELECT shipping_id
    FROM es_product_shipping_detail
    WHERE product_item_id IN (
</select>

<select id="deleteShippingHead">
    DELETE FROM es_product_shipping_head
    WHERE id_shipping IN (
</select>



<select id="getBrandById">
    SELECT name, id_brand, image, description FROM `es_brand` WHERE id_brand = :brand_id
</select>

<select id="getDraftItems">
   SELECT id_product,name,cat_id,cat_other_name,lastmodifieddate FROM  `es_product` WHERE member_id = :member_id AND is_draft = 1 AND is_delete = 0 ORDER BY lastmodifieddate DESC
</select>

<select id="deleteDraft">
    
    UPDATE es_product SET is_delete = 1 WHERE `id_product` = :product_id AND `member_id` = :member_id
</select>


<select id="getShipmentInformation">
    SELECT a.id_shipping, c.id_location, c.location, c.type, a.price, c.parent_id, b.product_item_id, COALESCE(d.product_attr_id,0) as product_attr_id, COALESCE(d.is_other,0) as is_other FROM es_product_shipping_head a
    LEFT JOIN es_product_shipping_detail b ON a.id_shipping = b.shipping_id 
    LEFT JOIN es_location_lookup c ON a.location_id = c.id_location
    LEFT JOIN es_product_item_attr d ON b.product_item_id = d.product_id_item
    WHERE a.product_id = :prod_id ORDER BY c.type
</select>


<select id='getSlugByID'>
    SELECT slug, name FROM es_product WHERE id_product = :id;
</select>

<select id="getProductSoldPrice">
    SELECT COALESCE(AVG(op.price),0) as sold_price FROM es_order_product op
    INNER JOIN es_order o ON op.order_id = o.id_order AND o.dateadded BETWEEN :datefrom AND :dateto
    WHERE op.product_id = :id AND o.order_status != 99
</select>


<!-- NEW PRODUCT UPLOAD STEP 3-->
<select id="finalizeProduct">
    UPDATE `es_product` 
    SET slug = :slug, is_draft = 0, is_cod = :cod
    WHERE member_id = :memberid AND id_product = :productid
</select>

<select id="finalizeProductKeepSlug">
    UPDATE `es_product` 
    SET is_draft = 0, is_cod = :cod
    WHERE member_id = :memberid AND id_product = :productid
</select>

<select id="updateProductUploadAdditionalInfo">
    UPDATE `es_product`
    SET is_cod = :is_cod, billing_info_id = :billing_id, is_meetup = :is_meetup
    WHERE member_id = :memberid AND id_product = :productid
</select>

<!-- Vendor Product Fetch -->
<select id="getVendorProdCatDetails">
    call `es_sp_vendorProdCatDetails`(:member_id)
</select>

<select id="getTopXCatItems">
    SELECT p.name, p.slug, FORMAT(p.price, 2) as price, pi.product_image_path
    FROM es_product p
    INNER JOIN es_cat c
        ON c.id_cat = p.cat_id AND p.member_id = :member_id
    LEFT JOIN es_product_image pi
        ON pi.product_id = p.id_product and pi.is_primary = 1
    WHERE p.cat_id IN ({in_condition}) AND p.is_draft = 0 AND p.is_delete = 0
    ORDER BY p.id_product DESC
    LIMIT :item_count
</select>

<select id="getFeaturedProductFeed">
    SELECT 
        * 
    FROM
        (SELECT 
            *
            , 'Following' AS feed_type
            , @a := @a + 2 AS rank 
        FROM
            (SELECT 
                c.username
                , c.imgurl
                , a.`vendor_id` AS member_id
                , b.id_product
                , b.name
                , b.brief
                , b.slug
                , b.createddate
                , b.condition
                , b.startdate
                , b.enddate
                , b.is_promote
                , b.discount
                , b.price
                , d.product_image_path
            FROM
                `es_vendor_subscribe` a
                , `es_product` b
                , es_member c
                , `es_product_image` d 
            WHERE a.`vendor_id` = b.`member_id` 
                AND a.`member_id` = :member_id 
                AND a.vendor_id = c.id_member 
                AND b.`id_product` = d.`product_id` 
                AND d.`is_primary` = 1 
                AND b.`is_delete` = 0
                AND b.`is_draft` = 0
                AND b.id_product NOT IN ({product_ids})
            ORDER BY createddate DESC) AS tbl 
        UNION
        ALL 
        SELECT 
            *
            , 'Partners' AS feed_type
            , @b := @b + 2 AS rank 
        FROM
            (SELECT 
                a.username
                , a.imgurl
                , b.member_id
                , b.id_product
                , b.`name`
                , b.brief
                , b.slug
                , b.createddate
                , b.condition
                , b.startdate
                , b.enddate
                , b.is_promote
                , b.discount
                , b.price
                , c.product_image_path
            FROM
                es_product b
                , es_member a
                , `es_product_image` c 
            WHERE b.member_id IN ({partners_id}) 
                AND b.member_id NOT IN 
                (SELECT 
                    vendor_id 
                FROM
                    `es_vendor_subscribe` 
                WHERE member_id = :member_id) 
                AND a.id_member = b.member_id 
                AND b.`id_product` = c.`product_id` 
                AND b.id_product NOT IN ({product_ids}) 
                AND c.is_primary = 1 
                AND b.`is_delete` = 0
                AND b.`is_draft` = 0
            ORDER BY RAND()) AS tbl2) table_feed 
    ORDER BY rank LIMIT {limit}

</select>

<select id="getNewProducts">
    SELECT 
        m.username
        , m.imgurl
        , p.member_id
        , p.id_product
        , p.name
        , p.brief
        , p.slug
        , p.createddate
        , p.condition
        , p.price
        , p.startdate
        , p.enddate
        , p.is_promote
        , p.discount
        , pi.product_image_path
    FROM es_product p
    INNER JOIN es_member m
        ON m.id_member = p.member_id
    INNER JOIN es_product_image pi
        ON pi.product_id = p.id_product AND pi.is_primary = 1
    WHERE p.is_draft = 0 AND p.is_delete = 0
    ORDER BY p.createddate DESC
    LIMIT {limit}
</select>
 

<select id="getItemAttributes">
    SELECT 
        IF(
            a1.`is_other` = '0'
            , 
            (SELECT 
                a.`name` 
            FROM
                `es_attr` a
                , `es_product_attr` b 
            WHERE a.`id_attr` = b.`attr_id` 
                AND b.id_product_attr = a1.product_attr_id)
            , 
            (SELECT 
                a.`field_name` 
            FROM
                `es_optional_attrhead` a
                , `es_optional_attrdetail` b 
            WHERE a.`id_optional_attrhead` = b.`head_id` 
                AND b.`id_optional_attrdetail` = a1.product_attr_id)
        ) AS head
        , IF(
            a1.`is_other` = '0'
            , 
            (SELECT 
                b.attr_value 
            FROM
                `es_attr` a
                , `es_product_attr` b 
            WHERE a.`id_attr` = b.`attr_id` 
                AND b.id_product_attr = a1.product_attr_id)
            , 
            (SELECT 
                b.`value_name` 
            FROM
                `es_optional_attrhead` a
                , `es_optional_attrdetail` b 
            WHERE a.`id_optional_attrhead` = b.`head_id` 
                AND b.`id_optional_attrdetail` = a1.product_attr_id)
        ) AS `value` 
    FROM
        `es_product_item_attr` a1 
    WHERE `product_id_item` = :itemId
</select>



</map>