<?xml version='1.0' ?>
<map>

<select id="user_logout">
	CALL `es_sp_Logout_user`(:user_session , :id_member)
</select>
	
<select id="user_login">
	CALL `es_sp_Login_user`(:username ,:password, :ip)
</select>
	
<select id="changepass">
	CALL `es_sp_ChangePass_User`(:username, :cur_password, :password)
</select>

<select id="forgotpass">
	CALL `es_sp_ForgotPass_User`(:username, :password)
</select>

<select id="getUserName">
	SELECT username from `es_member` WHERE `id_member` = :id
</select>

<select id="getUserID">
	SELECT id_member from `es_member` where username = :username
</select>

<!-- CHECK if email already used -->
<select id="getEmail">
	SELECT id_member, username FROM `es_member` WHERE email = :email LIMIT 1;
</select>

<!-- CHECK if mobile is already used -->
<select id="getMobile">
	SELECT id_member, username FROM `es_member` WHERE contactno = :contactno LIMIT 1;
</select>

<!-- Used for vendor details and username check- memberpage -->
<select id="get_member_by_username">
	SELECT m.id_member, m.username, m.contactno, m.email, a.stateregion, a.city, l1.location as stateregionname, l2.location as cityname, DATE_FORMAT(datecreated, "%M %Y") as datecreated
	FROM es_member m
	LEFT JOIN es_address a on m.id_member = a.id_member AND a.type=0
	LEFT JOIN es_location_lookup l1 ON a.stateregion =  l1.id_location
	LEFT JOIN es_location_lookup l2 ON a.city = l2.id_location
	where m.username=:username
</select>

<select id="getUserDetails">
	SELECT id_member, is_contactno_verify, is_email_verify
	FROM es_member
	WHERE id_member = :id
</select>

<select id="getUserRating">
	SELECT rating1, rating2, rating3
	FROM es_member_feedback
	WHERE for_memberid = :id
</select>

<select id="signup_member">
	CALL `es_sp_Signup_user` (:username, :password, :contactno, :email, :region)
</select>

<select id="check_contactinfo">
	SELECT id_member, contactno, email
	FROM es_member
	WHERE (contactno = :contactno OR email = :email)
		AND id_member != :member_id
</select>

<select id="store_verifcode">
	CALL `es_sp_storeVerifcode` (:member_id, :emailcode, :mobilecode, :mobile, :email)
</select>

<select id="get_verifcode">
	SELECT v.member_id, m.username, m.email, m.is_email_verify, v.emailcode, m.contactno, v.mobilecode, v.emailcount, v.mobilecount, TIMESTAMPDIFF(MINUTE, v.`date`,NOW()) as time
	FROM es_verifcode v
	LEFT JOIN  es_member m
	ON m.id_member = v.member_id 
	WHERE v.member_id = :member_id
</select>

<select id="update_mobileverif_status">
	UPDATE es_member
	SET is_contactno_verify = :is_contactno_verify
	WHERE id_member = :member_id
</select>

<select id="update_emailverif_status">
	UPDATE es_member
	SET is_email_verify = :is_email_verify
	WHERE id_member = :member_id
</select>

<!--
<select id="get_member">
	SELECT m.`id_member`, m.`nickname`, m.`fullname`, m.`gender`, m.`birthday`, m.contactno, m.is_contactno_verify, m.email, m.is_email_verify,
	COALESCE(a0.`streetno`, '') as streetno, COALESCE(a0.`streetname`, '') as streetname, COALESCE(a0.`barangay`, '') as barangay, 
	COALESCE(a0.`citytown`, '') as citytown, COALESCE(a0.`country`, '') as country, COALESCE(a0.`postalcode`, '') as postalcode,
	COALESCE(a1.`streetno`, '') as c_streetno, COALESCE(a1.`streetname`, '') as c_streetname, COALESCE(a1.`barangay`, '') as c_barangay, 
	COALESCE(a1.`citytown`, '') as c_citytown, COALESCE(a1.`country`, '') as c_country, COALESCE(a1.`postalcode`, '') as c_postalcode,
	COALESCE(a1.`telephone`, '') as c_telephone, COALESCE(a1.`mobile`, '') as c_mobile, COALESCE(a1.`consignee`, '') as consignee,
	a0.lat, a0.lng
	from es_member m 
	LEFT JOIN es_address a0 ON m.id_member=a0.id_member AND a0.`type`=0
	LEFT JOIN es_address a1 ON m.id_member=a1.id_member AND a1.`type`=1
	where m.id_member=:id_member
</select>	
-->

<select id="getLocationLookup">
	SELECT id_location, parent_id, location, type
	FROM es_location_lookup
	WHERE type = 0 OR type = 3 OR type = 4
	ORDER BY location asc
</select>


<select id="get_member">
	SELECT m.`id_member`,m.username, m.`nickname`, m.`fullname`, m.`gender`, m.`birthday`, m.contactno, m.is_contactno_verify, m.email, m.is_email_verify,
	a0.stateregion as stateregionID, a0.city as cityID, a1.stateregion as c_stateregionID, a1.city as c_cityID,
	COALESCE(loc0.location,'') as stateregion, COALESCE(loc1.location, '') as city, COALESCE(a0.address,'') as address,
	a1.consignee, a1.mobile as c_mobile, a1.telephone as c_telephone,
	COALESCE(loc2.location, '') as c_stateregion, COALESCE(loc3.location,'') as c_city, COALESCE(a1.address, '') as c_address,
	COALESCE(a0.lat, 0) as lat, COALESCE(a0.lng, 0) as lng, COALESCE(a1.lat, 0) as c_lat, COALESCE(a1.lng, 0) as c_lng
	FROM es_member m
	LEFT JOIN es_address a0 ON m.id_member=a0.id_member AND a0.`type`=0
	LEFT JOIN es_address a1 ON m.id_member=a1.id_member AND a1.`type`=1
	LEFT JOIN es_location_lookup loc0 ON a0.stateregion = loc0.id_location AND loc0.type = 3
	LEFT JOIN es_location_lookup loc1 ON a0.city = loc1.id_location AND loc1.type = 4
	LEFT JOIN es_location_lookup loc2 ON a1.stateregion = loc2.id_location AND loc2.type = 3
	LEFT JOIN es_location_lookup loc3 ON a1.city = loc3.id_location AND loc3.type = 4
	where m.id_member=:id_member
</select>


<select id="get_school">
	SELECT 
	COALESCE(s.`schoolname`,'') as `schoolname`, COALESCE(s.`year`,'') as `schoolyear`,COALESCE(s.`level`,'') as `schoollevel`,
	COALESCE(s.`count`,'') as `schoolcount` 
	FROM es_school s 
	WHERE id_member=:id_member
</select>

<select id="get_work">
		SELECT
		COALESCE(w.`companyname`, '') as companyname, COALESCE(w.`designation`, '') as designation, COALESCE(w.`year`, '') as `year`, COALESCE(w.`count`,'') as `count`
		FROM es_work w
		WHERE w.id_member = :id_member
</select>

<select id="edit_member">
	UPDATE es_member set fullname=:fullname, nickname=:nickname,gender = :gender,birthday = :birthday, contactno = :contactno, email = :email, is_contactno_verify = :is_contactno_verify, is_email_verify = :is_email_verify, lastmodifieddate = NOW()
	WHERE id_member = :id_member
</select>

<select id="edit_address">
	INSERT INTO `es_address` (`id_member`, `stateregion`, `city`, `address`, `country`, `type`, `telephone`, `mobile`, `consignee`, `lat`, `lng`) 
	VALUES (:id_member,:stateregion,:city,:address,:country, :type, :telephone, :mobile, :consignee, :lat, :lng)
	ON DUPLICATE KEY UPDATE stateregion=:stateregion,city=:city,address=:address,country = :country,telephone=:telephone,mobile=:mobile,consignee=:consignee,lat=:lat,lng=:lng
</select>


<select id="edit_school">
	INSERT INTO `es_school`(`id_member`, `schoolname`, `year`, `level`, `count`) 
	VALUES (:id_member, :schoolname, :year, :level, :school_count) 
	ON DUPLICATE KEY UPDATE `schoolname` = :schoolname, `year` = :year, `level` = :level;
</select>

<select id="edit_work">
	INSERT INTO `es_work` (`id_member`, `companyname`, `designation`, `year`, `count`)
	VALUES (:id_member, :companyname, :designation, :year, :count)
	ON DUPLICATE KEY UPDATE companyname = :companyname, designation = :designation, year = :year
</select>

<select id="delete_address">
	DELETE from es_address
	WHERE id_member = :id AND type = 0
</select>

<select id="delete_school">
	DELETE from es_school
	WHERE id_member = :id
</select>

<select id="delete_work">
	DELETE from es_work
	WHERE id_member = :id
</select>

<select id="update_imgurl">
	UPDATE `es_member` set `imgurl`=:path WHERE `id_member` = :id_member
</select>

<select id="get_image">
	SELECT `imgurl`, `id_member`, `username` FROM `es_member` WHERE `id_member` = :id
</select>
	
	
<select id="store_cookie_keeplogin">
	CALL `es_sp_CreateCookie_Keeplogin` (:id_member, :ip, :useragent, :usersession)
</select>

<!-- 
<select id="get_cookie_keeplogin">
	SELECT id_member, last_ip, useragent, token
	FROM `es_keeplogin`
	WHERE token = :token
</select>
-->

<select id="cookie_login">	
	CALL `es_sp_CookieLogin_user` (:userip, :useragent, :token, :usersession)
</select>

<select id="delete_cookie_keeplogin">
	DELETE FROM `es_keeplogin`
	WHERE id_member = :id_member AND last_ip = :ip AND useragent = :useragent AND token = :token
</select>

<!-- NOT USED - quick inspection
<select id="get_address">
	SELECT
	   `streetno`
	  , `streetname`
	  , `barangay`
	  , `citytown`
	  , `country`
	  , `postalcode`
	  , `type`
	  , `telephone`
	  , `mobile`
	  , `consignee`
	FROM `es_address`
	WHERE TYPE = 1
	AND id_member = :id_member
	limit 1
</select>
-->

<select id="addFeedback">
	INSERT INTO `es_member_feedback` (`member_id`, `for_memberid`, `feedb_msg`, `feedb_kind`, `order_id`, `dateadded`, `rating1`, `rating2`, `rating3`)
	VALUES (:member_id, :for_memberid, :feedb_msg, :feedb_kind, :order_id, NOW(), :rating1, :rating2, :rating3)
</select>

<select id="checkFeedback">
	SELECT id_feedback
	FROM es_member_feedback
	WHERE member_id = :member_id AND for_memberid = :for_memberid AND feedb_kind = :feedb_kind AND order_id = :order_id
</select>

<select id="getFeedback">
	SELECT fb.member_id, from.username as member_name, fb.for_memberid, for.username as for_membername, fb.feedb_msg, DATE_FORMAT(fb.dateadded, "%D %M %Y") as dateadded, fb.rating1, fb.rating2, fb.rating3, fb.feedb_kind, fb.order_id
	FROM `es_member_feedback` fb
	LEFT JOIN `es_member` `from`
		ON from.id_member = fb.member_id
	LEFT JOIN `es_member` `for`
		ON for.id_member = fb.for_memberid
	WHERE fb.member_id = :id OR fb.for_memberid = :id
	ORDER BY fb.dateadded
</select>

<select id="getTransactionDetails">
	SELECT o.id_order, o.buyer_id, buyer.username as buyer, DATE_FORMAT(o.dateadded, "%D %M %Y") as dateadded, o.order_status as transac_stat, fb.for_memberid, fb.feedb_msg, DATE_FORMAT(fb.dateadded, "%D %M %Y") as fbdateadded, fb.rating1, fb.rating2, fb.rating3, op.id_order_product, op.product_id, op.seller_id, seller.username as seller, p.name, op.order_quantity, op.total as price, op.status, pi.product_image_path, attr.name as attr_name, pattr.attr_value, pitemattr.is_other, oah.field_name, oad.value_name, buyer.email as buyer_email, 
		l0.location as stateregion, l1.location as city, badd.address, COALESCE(badd.lat, '0') as lat, COALESCE(badd.lng, '0') as lng,
		o.invoice_no, o.payment_method_id as payment_method, p.slug, badd.consignee, badd.mobile, badd.telephone
	FROM es_order o
	INNER JOIN es_order_product op 
		ON op.order_id = o.id_order AND (op.seller_id = :id OR o.buyer_id = :id)
	INNER JOIN es_product p
		ON op.product_id = p.id_product
	LEFT JOIN es_product_item_attr pitemattr
		ON op.product_item_id = pitemattr.product_id_item
	LEFT JOIN es_product_attr pattr
		ON pattr.id_product_attr = pitemattr.product_attr_id 
	LEFT JOIN es_attr attr
		ON pattr.attr_id = attr.id_attr
	LEFT JOIN es_optional_attrdetail oad
		ON	oad.id_optional_attrdetail = pitemattr.product_attr_id
	LEFT JOIN es_optional_attrhead oah
		ON oah.id_optional_attrhead = oad.head_id
	LEFT JOIN es_product_image pi
		ON op.product_id = pi.product_id AND pi.is_primary = 1
	LEFT JOIN es_member seller
		ON op.seller_id = seller.id_member
	LEFT JOIN es_member buyer
		ON o.buyer_id = buyer.id_member
	LEFT JOIN es_member_feedback fb
		ON fb.order_id = o.id_order AND (fb.for_memberid = op.seller_id OR fb.for_memberid = o.buyer_id) AND fb.member_id = :id
	LEFT JOIN es_address badd
		ON o.buyer_id = badd.id_member AND badd.type = 1
	LEFT JOIN es_location_lookup l0
		ON badd.stateregion = l0.id_location
	LEFT JOIN es_location_lookup l1
		ON badd.city = l1.id_location
	ORDER BY o.id_order desc, op.product_id asc
</select>

<!--	LANDING PAGE SUBSCRIPTION	-->
<select id="subscribe">
	INSERT INTO `es_subscribe` (`email`)
	VALUES (:email)
	ON DUPLICATE KEY UPDATE email = :email
</select>

<select id='getDefaultBillingAccnt'>
    SELECT ebi.`is_default` FROM `es_billing_info` ebi 
    WHERE ebi.`member_id`=:member_id AND ebi.`is_delete` = 0 
</select>

<select id='addBillingAccnt'>
    INSERT INTO `es_billing_info` (`is_default`,`member_id`,`payment_type`,`user_account`,`bank_id`,`bank_account_name`,`bank_account_number`,`dateadded`)
	VALUES (:is_default,:member_id,:payment_type,:user_account,:bank_id,:bank_account_name,:bank_account_number,NOW());
</select>

<select id='updateBillingAccnt'>
    UPDATE `es_billing_info` SET `bank_id`=:bank_id,`bank_account_name`=:bank_account_name,`bank_account_number`=:bank_account_number, `datemodified` = NOW()
	WHERE `member_id`=:member_id AND `id_billing_info` = :ibi
</select>

<select id='clearDefaultBillingAccnt'>
    UPDATE `es_billing_info` SET `is_default`=0, `datemodified` = NOW() WHERE `member_id`=:member_id 
</select>

<select id='setDefaultBillingAccnt'>
    UPDATE `es_billing_info` SET `is_default` = 1, `datemodified` = NOW() WHERE `member_id`=:member_id AND `id_billing_info`=:ibi
</select>

</map>
